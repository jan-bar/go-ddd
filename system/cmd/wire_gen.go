// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"jettjia/go-ddd-demo-multi-common/pkg/data"
	"jettjia/go-ddd-demo-multi-system/application/assembler"
	"jettjia/go-ddd-demo-multi-system/application/service"
	"jettjia/go-ddd-demo-multi-system/config"
	"jettjia/go-ddd-demo-multi-system/domain/aggregate"
	"jettjia/go-ddd-demo-multi-system/domain/srv"
	"jettjia/go-ddd-demo-multi-system/infra/repository/repo"
)

// Injectors from wire.go:

//go:generate wire
func InitServer() (*Server, error) {
	sysMenuReq := assembler.NewSysMenuReq()
	sysMenuRsp := assembler.NewSysMenuRsp()
	confConfig := config.NewConfig()
	db := repo.NewDB(confConfig)
	universalClient := repo.NewRedis(confConfig)
	client := repo.NewRocksCache(universalClient)
	dataData, err := data.NewData(db, universalClient, client)
	if err != nil {
		return nil, err
	}
	transaction := data.NewTransaction(dataData)
	sysMenu := repo.NewSysMenuImpl(dataData)
	sysLog := repo.NewSysLogImpl(dataData)
	aggregateSysMenu := aggregate.NewSysMenuAgg(transaction, sysMenu, sysLog)
	srvSysMenu := srv.NewSysMenuSvc(sysMenu)
	sysMenuService := service.NewSysMenuService(sysMenuReq, sysMenuRsp, aggregateSysMenu, srvSysMenu)
	server := NewServer(sysMenuService, confConfig)
	return server, nil
}
