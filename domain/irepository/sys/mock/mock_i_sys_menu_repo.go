// Code generated by MockGen. DO NOT EDIT.
// Source: ./i_sys_menu_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/jettjia/go-ddd-demo/domain/entity/sys"
	types "github.com/jettjia/go-ddd-demo/types"
)

// MockISysMenuRepo is a mock of ISysMenuRepo interface.
type MockISysMenuRepo struct {
	ctrl     *gomock.Controller
	recorder *MockISysMenuRepoMockRecorder
}

// MockISysMenuRepoMockRecorder is the mock recorder for MockISysMenuRepo.
type MockISysMenuRepoMockRecorder struct {
	mock *MockISysMenuRepo
}

// NewMockISysMenuRepo creates a new mock instance.
func NewMockISysMenuRepo(ctrl *gomock.Controller) *MockISysMenuRepo {
	mock := &MockISysMenuRepo{ctrl: ctrl}
	mock.recorder = &MockISysMenuRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISysMenuRepo) EXPECT() *MockISysMenuRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISysMenuRepo) Create(ctx context.Context, sysMenuEn *entity.SysMenu) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sysMenuEn)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISysMenuRepoMockRecorder) Create(ctx, sysMenuEn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISysMenuRepo)(nil).Create), ctx, sysMenuEn)
}

// Delete mocks base method.
func (m *MockISysMenuRepo) Delete(ctx context.Context, sysMenuEn *entity.SysMenu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sysMenuEn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISysMenuRepoMockRecorder) Delete(ctx, sysMenuEn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISysMenuRepo)(nil).Delete), ctx, sysMenuEn)
}

// ExecSql mocks base method.
func (m *MockISysMenuRepo) ExecSql(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecSql", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecSql indicates an expected call of ExecSql.
func (mr *MockISysMenuRepoMockRecorder) ExecSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSql", reflect.TypeOf((*MockISysMenuRepo)(nil).ExecSql), sql)
}

// FindAll mocks base method.
func (m *MockISysMenuRepo) FindAll(ctx context.Context, queries []*types.Query) ([]*entity.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, queries)
	ret0, _ := ret[0].([]*entity.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockISysMenuRepoMockRecorder) FindAll(ctx, queries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockISysMenuRepo)(nil).FindAll), ctx, queries)
}

// FindById mocks base method.
func (m *MockISysMenuRepo) FindById(ctx context.Context, id uint64) (*entity.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockISysMenuRepoMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockISysMenuRepo)(nil).FindById), ctx, id)
}

// FindByQuery mocks base method.
func (m *MockISysMenuRepo) FindByQuery(ctx context.Context, queries []*types.Query) (*entity.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByQuery", ctx, queries)
	ret0, _ := ret[0].(*entity.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByQuery indicates an expected call of FindByQuery.
func (mr *MockISysMenuRepoMockRecorder) FindByQuery(ctx, queries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByQuery", reflect.TypeOf((*MockISysMenuRepo)(nil).FindByQuery), ctx, queries)
}

// FindManyExecSql mocks base method.
func (m *MockISysMenuRepo) FindManyExecSql(sql string) ([]*entity.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyExecSql", sql)
	ret0, _ := ret[0].([]*entity.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyExecSql indicates an expected call of FindManyExecSql.
func (mr *MockISysMenuRepoMockRecorder) FindManyExecSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyExecSql", reflect.TypeOf((*MockISysMenuRepo)(nil).FindManyExecSql), sql)
}

// FindOneExecSql mocks base method.
func (m *MockISysMenuRepo) FindOneExecSql(sql string) (*entity.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneExecSql", sql)
	ret0, _ := ret[0].(*entity.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneExecSql indicates an expected call of FindOneExecSql.
func (mr *MockISysMenuRepoMockRecorder) FindOneExecSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneExecSql", reflect.TypeOf((*MockISysMenuRepo)(nil).FindOneExecSql), sql)
}

// FindPage mocks base method.
func (m *MockISysMenuRepo) FindPage(ctx context.Context, queries []*types.Query, reqPage *types.PageData, reqSort *types.SortData) ([]*entity.SysMenu, *types.PageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPage", ctx, queries, reqPage, reqSort)
	ret0, _ := ret[0].([]*entity.SysMenu)
	ret1, _ := ret[1].(*types.PageData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPage indicates an expected call of FindPage.
func (mr *MockISysMenuRepoMockRecorder) FindPage(ctx, queries, reqPage, reqSort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockISysMenuRepo)(nil).FindPage), ctx, queries, reqPage, reqSort)
}

// Update mocks base method.
func (m *MockISysMenuRepo) Update(ctx context.Context, sysMenuEn *entity.SysMenu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sysMenuEn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISysMenuRepoMockRecorder) Update(ctx, sysMenuEn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISysMenuRepo)(nil).Update), ctx, sysMenuEn)
}
